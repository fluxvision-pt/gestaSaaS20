from fastapi import FastAPI, Request, Response
from fastapi.middleware.cors import CORSMiddleware
from starlette.middleware.base import BaseHTTPMiddleware
from app.routers import auth, dashboard, transacoes, configuracoes
import os
import signal
import asyncio
import logging
from dotenv import load_dotenv
from pathlib import Path

# ==============================
# Inicializa√ß√£o e Logging
# ==============================

# ==========================
# Carregar vari√°veis do ambiente
# ==========================
# Caminho absoluto para o .env.production
env_path = Path(__file__).resolve().parent.parent / ".env.production"

# Garante o carregamento mesmo se o main j√° tiver feito isso
load_dotenv(dotenv_path=env_path, override=True)

# Configura√ß√£o b√°sica de logs
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("gestaSaaS")

# ==============================
# Inicializa√ß√£o do FastAPI
# ==============================
app = FastAPI(
    title="gestaSaaS API",
    description="API para gest√£o financeira inteligente",
    version="1.0.0"
)

# ==============================
# Controle de desligamento suave (graceful shutdown)
# ==============================
shutdown_event = asyncio.Event()

@app.on_event("startup")
async def startup_event():
    logger.info("üöÄ Iniciando gestaSaaS API...")

    # ‚úÖ Loga a conex√£o do DB para verificar se as vari√°veis est√£o corretas
    db_host = os.getenv("DB_HOST")
    db_name = os.getenv("DB_NAME")
    if not db_host or not db_name:
        logger.warning("‚ö†Ô∏è  Vari√°veis de ambiente do banco ausentes ou n√£o carregadas.")
    else:
        logger.info(f"‚úÖ DB conectado em: {db_host} | {db_name}")

    logger.info("‚úÖ Aplica√ß√£o iniciada com sucesso!")

@app.on_event("shutdown")
async def shutdown_event_handler():
    logger.info("üõë Iniciando shutdown graceful...")
    shutdown_event.set()
    await asyncio.sleep(2)
    logger.info("‚úÖ Shutdown conclu√≠do com sucesso!")

# ==============================
# Configura√ß√£o de CORS
# ==============================
cors_origins_str = os.getenv(
    "CORS_ORIGINS", 
    "https://app.fluxvision.cloud,https://rotas.fluxvision.cloud"
)
cors_origins = [o.strip() for o in cors_origins_str.split(",") if o.strip()]

environment = os.getenv("ENVIRONMENT", "production")

print(f"Environment: {environment}")
print(f"CORS Origins: {cors_origins}")

# Middleware padr√£o de CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=cors_origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ==============================
# Headers de seguran√ßa
# ==============================
@app.middleware("http")
async def add_security_headers(request: Request, call_next):
    response = await call_next(request)
    
    # Headers de seguran√ßa para evitar Mixed Content
    response.headers["Content-Security-Policy"] = "upgrade-insecure-requests"
    response.headers["Strict-Transport-Security"] = "max-age=31536000; includeSubDomains"
    response.headers["X-Content-Type-Options"] = "nosniff"
    response.headers["X-Frame-Options"] = "DENY"
    response.headers["X-XSS-Protection"] = "1; mode=block"
    
    return response

# ==============================
# Rotas da aplica√ß√£o
# ==============================
app.include_router(auth.router, prefix="/api")
app.include_router(dashboard.router, prefix="/api")
app.include_router(transacoes.router, prefix="/api")
app.include_router(configuracoes.router, prefix="/api")

# ==============================
# Rotas b√°sicas
# ==============================
@app.get("/")
async def root():
    return {"message": "gestaSaaS API - Gest√£o Inteligente"}

@app.get("/health")
async def health_check():
    """
    Health check endpoint otimizado para evitar reinicializa√ß√µes
    """
    try:
        import time
        return {
            "status": "healthy",
            "service": "gestaSaaS API",
            "timestamp": int(time.time()),
            "environment": os.getenv("ENVIRONMENT", "production"),
            "version": "1.0.0"
        }
    except Exception as e:
        logger.error(f"Health check falhou: {e}")
        return {
            "status": "unhealthy",
            "service": "gestaSaaS API",
            "error": str(e)
        }
