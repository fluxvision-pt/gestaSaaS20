from fastapi import FastAPI, Request, Response
from fastapi.middleware.cors import CORSMiddleware
from starlette.middleware.base import BaseHTTPMiddleware
from app.routers import auth, dashboard, transacoes, configuracoes
import os
import signal
import asyncio
import logging
from dotenv import load_dotenv
from pathlib import Path

# ==============================
# Inicializa√ß√£o e Logging
# ==============================

# ==============================
# Carregamento de vari√°veis de ambiente
# ==============================
# Detecta automaticamente o ambiente baseado na exist√™ncia de arquivos .env
base_path = Path(__file__).resolve().parent.parent
env_production_path = base_path / ".env.production"

# Usa .env.production se existir, sen√£o usa configura√ß√µes padr√£o de desenvolvimento
if env_production_path.exists():
    load_dotenv(dotenv_path=env_production_path)
    print("üîß Usando configura√ß√£o de PRODU√á√ÉO")
    print(f"üîß ENV carregado com sucesso: {os.getenv('DB_HOST')} | {os.getenv('DB_NAME')}")
else:
    print("üîß Usando configura√ß√£o padr√£o de DESENVOLVIMENTO")
    # Configura√ß√µes padr√£o para desenvolvimento local
    os.environ.setdefault("DB_HOST", "localhost")
    os.environ.setdefault("DB_PORT", "5432")
    os.environ.setdefault("DB_USER", "postgres")
    os.environ.setdefault("DB_PASSWORD", "postgres")
    os.environ.setdefault("DB_NAME", "gestasaas_dev")
    os.environ.setdefault("ENVIRONMENT", "development")
    os.environ.setdefault("DEBUG", "true")
    os.environ.setdefault("SECRET_KEY", "dev-secret-key-change-in-production")
    os.environ.setdefault("ALGORITHM", "HS256")
    os.environ.setdefault("ACCESS_TOKEN_EXPIRE_MINUTES", "30")
    os.environ.setdefault("HOST", "0.0.0.0")
    os.environ.setdefault("PORT", "8000")
    os.environ.setdefault("LOG_LEVEL", "info")
    print(f"üîß Configura√ß√µes padr√£o aplicadas: {os.getenv('DB_HOST')} | {os.getenv('DB_NAME')}")

# Configura√ß√£o b√°sica de logs
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("gestaSaaS")

# ==============================
# Inicializa√ß√£o do FastAPI
# ==============================
app = FastAPI(
    title="gestaSaaS API",
    description="API para gest√£o financeira inteligente",
    version="1.0.0"
)

# ==============================
# Controle de desligamento suave (graceful shutdown)
# ==============================
shutdown_event = asyncio.Event()

@app.on_event("startup")
async def startup_event():
    logger.info("üöÄ Iniciando gestaSaaS API...")

    # ‚úÖ Loga a conex√£o do DB para verificar se as vari√°veis est√£o corretas
    db_host = os.getenv("DB_HOST")
    db_name = os.getenv("DB_NAME")
    if not db_host or not db_name:
        logger.warning("‚ö†Ô∏è  Vari√°veis de ambiente do banco ausentes ou n√£o carregadas.")
    else:
        logger.info(f"‚úÖ DB conectado em: {db_host} | {db_name}")

    logger.info("‚úÖ Aplica√ß√£o iniciada com sucesso!")

@app.on_event("shutdown")
async def shutdown_event_handler():
    logger.info("üõë Iniciando shutdown graceful...")
    shutdown_event.set()
    await asyncio.sleep(2)
    logger.info("‚úÖ Shutdown conclu√≠do com sucesso!")

# ==============================
# Configura√ß√£o de CORS
# ==============================
cors_origins_str = os.getenv(
    "CORS_ORIGINS",
    "https://app.fluxvision.cloud,https://rotas.fluxvision.cloud"
)
cors_origins = [o.strip() for o in cors_origins_str.split(",") if o.strip()]

environment = os.getenv("ENVIRONMENT", "production")
if environment == "development":
    cors_origins = ["*"]
else:
    # Adiciona localhost para desenvolvimento local mesmo em produ√ß√£o
    cors_origins.extend([
        "http://localhost:3000",
        "http://localhost:3001", 
        "http://127.0.0.1:3000",
        "http://127.0.0.1:3001"
    ])

print(f"Environment: {environment}")
print(f"CORS Origins: {cors_origins}")

# Middleware padr√£o de CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=cors_origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ==============================
# Middleware customizado para CORS din√¢mico
# ==============================
class CORSOptionsMiddleware(BaseHTTPMiddleware):
    async def dispatch(self, request: Request, call_next):
        origin = request.headers.get("Origin")
        
        # Verifica se a origem est√° nas origens permitidas
        allowed_origin = None
        if origin:
            if environment == "development" or origin in cors_origins:
                allowed_origin = origin
        
        # Trata manualmente requisi√ß√µes OPTIONS (pr√©-flight)
        if request.method == "OPTIONS":
            response = Response()
            req_headers = request.headers.get("Access-Control-Request-Headers", "*")

            if allowed_origin:
                response.headers["Access-Control-Allow-Origin"] = allowed_origin
                response.headers["Access-Control-Allow-Credentials"] = "true"
            response.headers["Access-Control-Allow-Methods"] = "GET, POST, PUT, DELETE, OPTIONS, PATCH"
            response.headers["Access-Control-Allow-Headers"] = req_headers
            response.headers["Vary"] = "Origin"
            return response

        # Adiciona o cabe√ßalho em todas as respostas
        response = await call_next(request)
        
        if allowed_origin:
            response.headers["Access-Control-Allow-Origin"] = allowed_origin
            response.headers["Access-Control-Allow-Credentials"] = "true"
            response.headers["Vary"] = "Origin"
        
        # Headers de seguran√ßa para evitar Mixed Content
        response.headers["Content-Security-Policy"] = "upgrade-insecure-requests"
        response.headers["Strict-Transport-Security"] = "max-age=31536000; includeSubDomains"
        response.headers["X-Content-Type-Options"] = "nosniff"
        response.headers["X-Frame-Options"] = "DENY"
        response.headers["X-XSS-Protection"] = "1; mode=block"
        
        return response

app.add_middleware(CORSOptionsMiddleware)

# ==============================
# Rotas da aplica√ß√£o
# ==============================
app.include_router(auth.router, prefix="/api")
app.include_router(dashboard.router, prefix="/api")
app.include_router(transacoes.router, prefix="/api")
app.include_router(configuracoes.router, prefix="/api")

# ==============================
# Rotas b√°sicas
# ==============================
@app.get("/")
async def root():
    return {"message": "gestaSaaS API - Gest√£o Inteligente"}

@app.get("/health")
async def health_check():
    """
    Health check endpoint otimizado para evitar reinicializa√ß√µes
    """
    try:
        import time
        return {
            "status": "healthy",
            "service": "gestaSaaS API",
            "timestamp": int(time.time()),
            "environment": os.getenv("ENVIRONMENT", "development"),
            "version": "1.0.0"
        }
    except Exception as e:
        logger.error(f"Health check falhou: {e}")
        return {
            "status": "unhealthy",
            "service": "gestaSaaS API",
            "error": str(e)
        }
